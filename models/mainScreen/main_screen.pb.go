// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models/mainScreen/main_screen.proto

package mainScreen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Entry struct {
	Text                 string   `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e772dd8dd8310552, []int{0}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type LabelValue struct {
	Text                 string   `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelValue) Reset()         { *m = LabelValue{} }
func (m *LabelValue) String() string { return proto.CompactTextString(m) }
func (*LabelValue) ProtoMessage()    {}
func (*LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e772dd8dd8310552, []int{1}
}

func (m *LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelValue.Unmarshal(m, b)
}
func (m *LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelValue.Marshal(b, m, deterministic)
}
func (m *LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelValue.Merge(m, src)
}
func (m *LabelValue) XXX_Size() int {
	return xxx_messageInfo_LabelValue.Size(m)
}
func (m *LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_LabelValue proto.InternalMessageInfo

func (m *LabelValue) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Entry)(nil), "mainScreen.Entry")
	proto.RegisterType((*LabelValue)(nil), "mainScreen.LabelValue")
}

func init() {
	proto.RegisterFile("models/mainScreen/main_screen.proto", fileDescriptor_e772dd8dd8310552)
}

var fileDescriptor_e772dd8dd8310552 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0x29, 0xd6, 0xcf, 0x4d, 0xcc, 0xcc, 0x0b, 0x4e, 0x2e, 0x4a, 0x4d, 0xcd, 0x03, 0x33, 0xe3,
	0x8b, 0xc1, 0x6c, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x2e, 0x84, 0xac, 0x92, 0x34, 0x17,
	0xab, 0x6b, 0x5e, 0x49, 0x51, 0xa5, 0x90, 0x10, 0x17, 0x4b, 0x48, 0x6a, 0x45, 0x89, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0xad, 0xa4, 0xc0, 0xc5, 0xe5, 0x93, 0x98, 0x94, 0x9a, 0x13,
	0x96, 0x98, 0x53, 0x9a, 0x8a, 0x4d, 0x85, 0x91, 0x07, 0x17, 0x97, 0x2f, 0xdc, 0x30, 0x21, 0x2b,
	0x2e, 0xee, 0xd0, 0x82, 0x94, 0xc4, 0x92, 0x54, 0xb0, 0x2e, 0x21, 0x41, 0x3d, 0x84, 0x45, 0x7a,
	0x60, 0x5b, 0xa4, 0xc4, 0x90, 0x85, 0x10, 0x66, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0xdd, 0x66, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xa3, 0x87, 0xa1, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MainScreenClient is the client API for MainScreen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MainScreenClient interface {
	UpdateLabel(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*LabelValue, error)
}

type mainScreenClient struct {
	cc *grpc.ClientConn
}

func NewMainScreenClient(cc *grpc.ClientConn) MainScreenClient {
	return &mainScreenClient{cc}
}

func (c *mainScreenClient) UpdateLabel(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*LabelValue, error) {
	out := new(LabelValue)
	err := c.cc.Invoke(ctx, "/mainScreen.MainScreen/UpdateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainScreenServer is the server API for MainScreen service.
type MainScreenServer interface {
	UpdateLabel(context.Context, *Entry) (*LabelValue, error)
}

// UnimplementedMainScreenServer can be embedded to have forward compatible implementations.
type UnimplementedMainScreenServer struct {
}

func (*UnimplementedMainScreenServer) UpdateLabel(ctx context.Context, req *Entry) (*LabelValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabel not implemented")
}

func RegisterMainScreenServer(s *grpc.Server, srv MainScreenServer) {
	s.RegisterService(&_MainScreen_serviceDesc, srv)
}

func _MainScreen_UpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainScreenServer).UpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainScreen.MainScreen/UpdateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainScreenServer).UpdateLabel(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

var _MainScreen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainScreen.MainScreen",
	HandlerType: (*MainScreenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLabel",
			Handler:    _MainScreen_UpdateLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/mainScreen/main_screen.proto",
}
